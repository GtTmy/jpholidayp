#!/usr/bin/env python
import sys
import os
import errno
from datetime import datetime, date, timedelta
import urllib2
import json
import cPickle as pickle

datadir = "~/.jpholidayp"
cachefile = "cache"
cachedays = 2
fetchdays = 2

class Cache:
    def __init__(self):
        try:
            os.mkdir(os.path.expanduser(datadir))
        except OSError, (eno):
            if eno.errno != errno.EEXIST:
                raise

    def get(self):
        file = os.path.join(os.path.expanduser(datadir), cachefile)
        if not os.path.exists(file):
            return None
        today = date.today()
        with open(file) as f:
            dat = pickle.load(f)
        if dat["expires"] <= today:
            return None
        else:
            return dat["val"]

    def set(self, val):
        expires = date.today() + timedelta(cachedays)
        dat = {"expires": expires, "val": val}
        file = os.path.join(os.path.expanduser(datadir), cachefile)
        with open(file, "w") as f:
            pickle.dump(dat, f)

class GoogleJpHoliday:
    URLBASE = "http://www.google.com/calendar/feeds/japanese@holiday.calendar.google.com/public/full"
    DATEFMT = "%Y-%m-%d"

    @classmethod
    def get(self, dt, delta):
        cache = Cache()
        dat = cache.get()
        if dat and dat["date"] <= dt and dt < (dt + dat["delta"]):
            return dat["data"]
        else:
            dat_new = self.get_remote(dt, delta)
            cache.set({"date": dt, "delta": delta, "data": dat_new})
            return dat_new

    @classmethod
    def get_remote(self, dt, delta):
        min = date.strftime(dt, self.DATEFMT)
        max = date.strftime(dt + delta, self.DATEFMT)
        url = self.URLBASE + "?alt=json&start-min=%s&start-max=%s" % (min, max)
        res = urllib2.urlopen(url)
        dat = json.load(res)
        return [datetime.strptime(x["gd$when"][0]["startTime"], self.DATEFMT).date() for x in dat["feed"]["entry"]]

class JpHoliday:
    @classmethod
    def is_national_holiday(self, dt):
        holidays = GoogleJpHoliday.get(dt, timedelta(fetchdays))
        return dt in holidays

    # value of datetime.weekday()
    SATURDAY = 5
    SUNDAY = 6

    @classmethod
    def is_holiday(self, dt):
        w = dt.weekday()
        if w == self.SATURDAY or w == self.SUNDAY:
            return True
        elif self.is_national_holiday(dt):
            return True
        else:
            return False

# exit statuses
EXIT_HOLIDAY = 0
EXIT_WEEKDAY = 1
EXIT_ERROR = 2

def jpholidayp():
    today = date.today()
    if JpHoliday.is_holiday(today):
        sys.exit(EXIT_HOLIDAY)
    else:
        sys.exit(EXIT_WEEKDAY)

if __name__ == "__main__":
    jpholidayp()
